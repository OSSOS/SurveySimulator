
--------------------------------------------------------------------------------

This directory contains all files necessary to use a python wrapper to run the
fortran based survey simulator.


The content of this directory is:

README.python           (this file) Describes the architecture of the Driver
                        and GiMeOjb routines.

Source Code
-----------
Driver.py               The primary python file used for the survey simulator
                        wrapper. It is Driver that is executed by the user,
                        and which in turn calls all subsequent modules.

ssimTools.py            Python module containing miscellaneous functions
                        required for Driver. Primarily input/output functions.

SurveySubs.f            The fortran source code that comprises the bulk of the
                        computationally intensive work done by the survey
                        simulator. Must be compiled in order for the python
                        wrapper to call the subroutines within.

GiMeObj_X.py            The GiMeObj python module creates from a distribution
                        or selects from a source file, objects with the required
                        orbital parameters which are then returned to Driver,
                        and in turn to the fortran code. Only a single GiMeObj
                        file is required to run the survey simulator, however
                        four have been provided here to serve as an example of
                        the capabilities of the GiMeObj module. These files
                        could be combined into a single file, but have been
                        separated in the interests of clarity. The user can
                        choose the option that best suits their needs and adapt
                        it from there.

                        The four provided examples are as follows:

    GiMeObj_Ring.py         The simplest GiMeObj module provided. It contains a
                            generated distribution of particles in a ring.
                            Semi-major axis varies as a gaussian while all
                            other parameters are set to a constant or uniform
                            random variable, as appropriate.

    GiMeObj_Distribution.py The second example distribution provides a more
                            complicated version of the previous "Ring"
                            distribution. Once again all parameters are
                            generated from probability distributions, but
                            parameters take on more complicated distributions
                            as opposed to being set constant.

    GiMeObj_Toy_21.py       This module illustrates the ability to use multiple
                            Obj class instances within a single GiMeObj module.
                            This example presents a simplified toy model of the
                            objects in a 2:1 resonance with Neptune. The source
                            objects are split into three populations, and three
                            corresponding class instances; the symmetric
                            population, the asymmetric leading population, and
                            the asymmetric trailing population.

    GiMeObj_File.py         This module demonstrates how to read in object
                            parameters from provided source files, and contains
                            means to artificially increase the number of
                            objects read-in, in order to ensure a reasonable
                            number of objects to be used in the survey
                            simulator.

Input Files
-----------
input.file              This is the primary input file that communicates to
                        Driver the basic setup desired. It contains:
                          - The name of the GiMeObj module which should be used.
                          - The number used to seed the random number generator.
                          - The number of objects to detect.
                          - The number of objects to track.
                          - The directory containing the survey
                            characterization files.

H_dist_vars.txt         This text file contains a series of constants used to
                        create a distribution of H-magnitudes for the objects
                        used in the survey simulator.

model.txt               This text is only required when reading in values from
                        a text file. This text file contains the file name of
                        a different text file containing the values to be
                        read-in. This structure can make it easier to change
                        text files in use on a cluster.

all_particles.dat       This is an example text file containing object
                        parameters obtained from a model. it is used in the
                        GiMeObj_File.py example. See text file comments for
                        further details.

Output Files
-----------

drawn.dat               A text file containing a list of the first 5000 objects
                        generated by GiMeObj and returned to Driver. Comparing
                        this file with the other output files allows comparison
                        between what was and what was not detected.
                        (5000 entries is chosen as an arbitrary limit to avoid
                        possibly millions of values being written to the text
                        file. the first 5000 serves to illustrate the general
                        trend of drawn objects. This value can be changed
                        within Driver.)

tracked.dat             This text file contains a list of all objects that the
                        survey simulator evaluates would have been detected and
                        tracked by the surveys that are being simulated. This
                        allows a comparison between actual observations and the
                        theoretical objects that would have been detected.

detections.dat          This text file contains a more expansive listing than
                        that presented in tracked.dat. detections.dat has more
                        data fields and contains more object entries, including
                        objects that were detected but were not tracked. This
                        larger data set is useful for diagnostic purposes in
                        order to examine which objects were detected, but then
                        were not able to be fully tracked.

Supplementary Files     (Not required to run the survey simulator, but can
-------------------     be useful.)

facedownplot.py         Python module that plots the objects returned by
                        GiMeObj in black, and plots the tracked detections
                        returned by Driver in red. this allows a quick visual
                        examination of the survey simulator results.

example_X.png           Four example plots generated by facedownplot.py. Each
                        image corresponds to the four different example GiMeObj
                        modules provided.

--------------------------------------------------------------------------------

Fortran Compilation
-------------------

f2py -c --f77exec=/usr/bin/gfortran --f77flags=-fPIC -m SurveySubs SurveySubs.f

--------------------------------------------------------------------------------

Setup
-----

Before the survey simulator can be run the user must set up their specific
GiMeObj.py file with the theoretical distribution they wish to examine. The
objects in GiMeObj represent the actual Objects that exist in the solar system.
Once run through the survey simulator the Results returned reveal which of
these objects would be seen by the given surveys. As such the creation of a
GiMeObj file that accurately models the theoretical population you wish to
examine in the most important part of running the survey simulator. Most of the
documentation presented here will cover how to create and modify GiMeObj files,
while the average user will never need to modify Driver or any other source
code files.

There are three parts of a GiMeObj module that a user will need to alter to
create their own source population.

1)  draw_X()
    --------
    Within the Obj class an, appropriately named, draw_x method must be created.
    It is within this method that each of the object's parameters must be set,
    an array of values for the semi-major axis, another array for the
    eccentricities, etc. These parameters can be set using one of the methods
    already programmed into the Obj class (e.g. gauss_range or linear_peak) or
    the user can define their own method within the class to create a different
    kind of distribution.

    The draw_X method will comprise the majority of changes a user will need to
    make, but the customization will be highly variable to individual use cases
    and is left largely to the user.

2)  initialize()
    ------------
    Once all parameters have been defined within draw_x, the next part of
    GiMeObj that needs to be set is the initialize() function. Here the user
    can define the size of the arrays to be generated in the class instances.
    Larger arrays reduce computation time by ensuring the arrays need to be
    re-drawn less frequently, but in turn larger arrays consume more memory.
    (The default value is arrays with 10^6 entries.)

    Once the array size is set you must instantiate instances of the base Obj
    class. (Currently the global variables used to store these instances are
    simply labelled obj1, obj2, etc. but more appropriate names can be set by
    the user.) Once the class instance is created the user must then call the
    draw_X method on this instance to fill it with the parameters defined in
    step 1. [e.g. obj1.draw_ring()] This fills the newly created instance with
    the user defined arrays.

    For simple distributions, comprised of only a single population, this
    definition is extremely specific and more detailed than is strictly
    necessary. However setting up this instance structure allows more
    complicated distributions made up of disparate populations to easily be
    created, in a separate class instance. (For an illustration of this ability
    see the example GiMeObj_Toy_21.py which uses three different object
    populations and correspondingly three object instances.)

    NOTE:
    The Obj class has a diagnostic plotting function (plot()) which allows the
    user to examine the distributions they create upon initialization. It is
    recommended that once parameters are defined the plot function is used for
    the first run to ensure that array behave as expected. the plot function is
    not appropriate for actual data runs and as such terminates the program when
    it completes plotting. as such all calls to the plot method must be removed
    before calls can be made to the survey simulator.

3)  gimeobj()
    ---------
    The gimeobj() function is the function called by Driver and is the function
    that decides which values to extract from the object arrays that are then
    sent to the survey simulator.

    In the simple case where only a single Obj instance is required (i.e. only
    obj1 exists.) then this function can be left unaltered. In situations where
    more than one instance is in use, this function will need to be altered
    with some sort of decision structure to choose which object to draw
    parameters from before returning them to Driver. (Again, see
    GiMeObj_Toy_21.py for an example of such a structure.)

Four version of GiMeObj.py are presented here to serve as templates for the
types of distributions a user would want to create. The four examples are as
follows:

    GiMeObj_Ring.py
        This is about the simplest GiMeObj that can be created. It assigns a
        constant or uniformly distributed random value to each parameter, as
        appropriate, with the exception of semi-major axis (a) which forms a
        gaussian distribution. This example serves to illustrate the basic
        structure of the GiMeObj module.

    GiMeObj_Distribution.py
        This example takes the Ring distribution above and adds complexity to
        the distributions for the remaining parameters. This example serves to
        show the different class methods programmed into GiMeObj that can be
        used for generating all manner of specific distributions. While the
        population presented here is not intended to be indicative of any real
        world distribution, it demonstrates the tools that can be used to
        create more accurate populations.

    GiMeObj_Toy_21.py
        This is the most complicated generated distribution presented here. It
        presents a toy model of the objects in a 2:1 mean motion resonance with
        Neptune. The model itself is not sophisticated, simplifying most values
        to random distributions or constants, but it demonstrates some of the
        more advanced capabilities of the techniques employed within GiMeObj.

        First, it demonstrates the ability to create local scope variables
        within the draw_X methods, which are then used to compute object
        parameters as a function of other object parameters. (i.e. the
        calculation of .peri values from the .resamp values using the
        intermediate phi variable not accessible outside of the method.)

        Secondly, and more importantly, the structure around using multiple
        class instances to generate disparate populations. In this scenario
        there are three class objects created, the symmetric population, the
        asymmetric leading population, and the asymmetric trailing population.
        Once all three populations have been defined, instantiated, and
        initialized, at each call the gimeobj() function selects one to extract
        values from which are the returned to Driver.

    GiMeObj_File.py
        This example presents the most likely use of GiMeObj, and while not
        technically challenging, is also the usage most difficult to implement
        properly. This example reads model data in from a file, which it then
        uses to fill arrays to the size given in the initialize() function.

        The difficulty arises due to the fact that model data text files
        frequently have data number in the hundreds to thousands of entries,
        while the survey simulator requires something on the order of millions
        of values. If these relatively few values are used looped over hundreds
        of times to provide the survey simulator enough data to work with
        strange statistical effects arise, sampling the same few objects over
        and over again. As such methods to artificially "create" more data are
        required. Within GiMeObj there is a blur method that is used to vary
        the values read in from the file by a random value up to 1% of their
        original value. This serves to "blur" the distribution creating a less
        repetitive data set.

        It is within this blur method that complications arise. Not all data
        sets can be manipulated in this way without fundamentally changing
        their meaning. Even in this comparatively simple example case a special
        method needed to be created for the eccentricities so that values of 1
        and above were not encountered. Individual use cases will have highly
        variable statistical effects and edge cases that will need to be
        evaluated on a case by case basis. The development of appropriate
        "blurring" methods is primarily left to the user and their specific
        needs.

Other Setup Files
-----------------

The only other files that the user need to prepare before running the survey
simulator are the files listed above in the Input Files section.
These include:

"input.file"
Which details the name of the GiMeObj module to be used, the value
of the seed for the random number generator, the number of objects to detect,
and track, and the directory where the survey characterization files are
located.

"H_dist_vars.txt"
A file containing a series of constants used to generate the H-magnitude
distribution for the object populations.

Then the following files are required only if reading values from a file:

"model.txt"
A text file giving the name of a different file where the data to be read-in
can be found

Finally the data file indicated in "model.txt" whose content will be determined
by the user.

--------------------------------------------------------------------------------

Running the Survey Simulator
----------------------------

The survey simulator is run by making a call to Driver.py from the appropriate
command line. (i.e. python Driver.py)

Driver does the following:
    Import required modules.
    Read-in provided input files.
    Create output files and write their headers.
    Driver then loops until it reaches the appropriate number of detected or
    tracked objects
        Driver calls gimeobj to receive a new object and its parameters.
        This object is then fed into Detos1, which is a fortran subroutine.
        Based on the values returned by Detos1, Driver determines if the object
            was not detected, detected, or tracked.
        Based on this determination the object is written to the appropriate
            output file
        Driver then starts the loop again checking the end conditions
    Once the requisite number of detections or tracked objects are found Driver
        writes a suffix to the output files and terminates.


The GiMeObj routine (whose content should be determined by the user) returns
a single new object at each call.

The Detos1 routine determines if the proposed object would have been detected
and possibly tracked (meaning the orbit of a detected object is determined to
high precision) by the survey(s) the user has chosen to simulate. It then
decides if the object is characterized, i.e. is brighter than the
characterization limit for the block and rate of motion it was discovered
in. It is the characterized tracked simulated detection list which must be
compared to the true detections. This is returned in the "tracked.dat" file.

--------------------------------------------------------------------------------
