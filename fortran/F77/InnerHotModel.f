c-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
c InnerHotMain.f
c
c Generic model routines for Survey Simulator, version 2.0 
c
c   THIS ROUTINE PROVIDES A TOY MODEL of the inner classical Kuiper Belt.
C This is NOT the L7 CFEPS model for this inner classical belt, but rather
C a stripped-down version that illustrates the basic functionality needed by
C every GiMeObj routine.
c    Since this routine is called once for every object created, it needs
c to input its own model parameters once when it is first called, and
c then save these values for future use.
c
c Calling sequence in SurveySimulator.f (survey simulator driver) is:
c
c Loop (some condition):
c     call GiMeObj(arg_list_1)
c     Check model ended:
c         set exit condition
c     call Detos1(arg_list_2)
c     Check detection and tracking:
c         store results
c
c where arg_list_1 is
c (filena, seed, a, e, inc, node, peri, M, epoch, h, color, gb, ph,
c  period, amp, comp, ierr)
c with:
c
c INPUT
c     filena: name of containing description of model, read in by the
c             model subroutine "modname" (CH)
c     seed  : Random number generator seed (I4)
c
c OUTPUT
c     a     : semimajor axis (R8)
c     e     : eccentricity (R8)
c     inc   : Inclination [rad] (R8)
c     node  : Longitude of node [rad] (R8)
c     peri  : Argument of perihelion [rad] (R8)
c     M     : Mean anomaly [rad] (R8)
c     epoch : epoch of the orbital elements, in Julian Day (R8)
c     h     : absolute magnitude of object in band filter "x" (R8)
c     color : array of colors "y-x", where the index of "y" is as
c             described in detos1 (10*R8)
c                color(1) : g-x
c                color(2) : r-x
c                color(3) : i-x
c                color(4) : z-x
c                color(5) : u-x
c                color(6) : V-x
c                color(7) : B-x
c                color(8) : R-x
c                color(9) : I-x
c     gb    : opposition surge factor, Bowell formalism (R8)
c     ph    : phase of lightcurve at epoch [rad] (R8)
c     period: period of lightcurve [day] (R8)
c     amp   : amplitude of lightcurve [mag] (R8)
c     commen: user specified string containing whatever the user wants (CH*100)
c     nchar : number of characters in the comment string that should be
c             printed out in output files if the object is detected;
c             maximum of 100 (I4)
c     ierr  : return code
c                  0 : nominal run, things are good
c                100 : end of model, exit after checking this object
c                -10 : could not get all orbital elements, skip object
c                -20 : something went grossly wrong, should quit
c
c The model subroutines can access files using logical unit numbers from
c 20 to 25. This range in reseved for them and won't be used by the
c drivers nor SurveySubs routines.
c
c It is good practice that when first started, the GiMeObj routine
c writes a file describing the model used, the version and the date of
c the routine.
c
c Since this routine is called once for every object created, it needs
c to get all the required parameters once when it is called the first
c time, then save these values for future use.
c
c The following routine gives a working example of a model routine. It
c is probably worth reading it through carefully the first time.
c
c The survey simulator expects orbital elements with respect to ecliptic
c reference frame since it is in that frame that orbits are propogated
c for observability.  You may, however, want to generate orbits with respect
c to a different reference plane and convert at the end just before passing
c the orbit back.
c
c-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
c
c File generated on 2017-09-01
c
c-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
c Authors: J-M. Petit (Observatoire de Besancon, France)
C          B. Gladman (University of British Columbia, Canada)
c-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

      subroutine GiMeObj (filena, seed, a, e, inc, node, peri, M,
     $  epoch, h, color, gb, ph, period, amp, commen, nchar, ierr)
c-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
c   This routine generates an object from a model generated by a paramtric
c algorithm.
C   Note it is ALWAYS called GiMeObj regardless of the model, but the
C routine's input file 'filena' (passed in from the Driver) will usually
C have the specific name.  In this example, filena is InnerHot.in
c-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
c INPUT
c     filena: name of file containing parameters for this model (CH)
c     seed  : Random number generator seed (I4)
c
c OUTPUT
c The survey simulator expects BARYCENTRIC J2000 orbital elements with 
C respect to the ecliptic reference frame.
c     a     : semimajor axis (barycentric ecliptic J2000) (R8)
c     e     : eccentricity (R8)
c     inc   : Inclination with respect to J2000 ecliptic [rad] (R8)
c     node  : Longitude of ascending node [rad] (R8)
c     peri  : Argument of perihelion [rad] (R8)
c     M     : Mean anomaly [rad] (R8)
c     epoch : epoch for M (and rotational phase below), in Julian Day (R8)
c     h     : Absolute magnitude of object in 'x' band (R8)  Often x = r.
c     color : Array of colors (10*R8), "y-x", where the index "y" is:
c                colors(1) : g-x
c                colors(2) : r-x         will be zero if x band is r.
c                colors(3) : i-x
c                colors(4) : z-x
c                colors(5) : u-x
c                colors(6) : V-x
c                colors(7) : B-x
c                colors(8) : R-x
c                colors(9) : I-x
c     gb    : opposition surge factor G, Bowell formalism (R8)
c     ph    : phase of lightcurve at epoch [rad] (R8)
c     period: period of lightcurve [day] (R8)  CANNOT BE ZERO
c     amp   : peak-to-peak amplitude of lightcurve [mag] (R8)  CAN BE ZERO
c     commen: user specified string containing whatever the user wants (CH*100)
c     nchar : number of characters in the comment string that should be
c             printed out in output files if the object is detected;
c             maximum of 100 (I4)
c     ierr  : return code (I4)
c                  0 : nominal run, things are good
c                100 : end of model, exit after checking this object
c                -10 : could not get all orbital elements, skip object
c                -20 : something went grossly wrong, should quit
c
c The user can fill the 100-character 'commen' string any way they
c wish; this comment string will be printed in the driver on the output
c line of each detection.  Examples of the comment might be resonance name
c and libration amplitude, or the name of a component in the GiMeObj model
c that the object responds to.  The nchar variable (passed back to Driver)
c allows the user to print only the first nchar characters of this string.
c
c This routine uses logical unit 20 to access the file containing the model.
c
c-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
c
c Set of F2PY directive to create a Python module
c
Cf2py intent(in) filena
Cf2py intent(in,out) seed
Cf2py intent(out) a
Cf2py intent(out) e
Cf2py intent(out) inc
Cf2py intent(out) node
Cf2py intent(out) peri
Cf2py intent(out) M
Cf2py intent(out) epoch
Cf2py intent(out) h
Cf2py intent(out) color
Cf2py intent(out) gb
Cf2py intent(out) ph
Cf2py intent(out) period
Cf2py intent(out) amp
Cf2py intent(out) commen
Cf2py intent(out) nchar
Cf2py intent(out) ierr

      implicit none

c Calling arguments
      integer*4 ierr, seed, nchar
      real*8 a, e, inc, node, peri, M, epoch, h, color(10), gb, ph,
     $  period, amp
      character filena*(*), commen*100

c Some values better set up as parameters
      integer*4
     $  lun_m,                  ! Logical unit number, model description file
     $  lun_ll                  ! Logical unit number, logging
      real*8
     $  Pi,                     ! Pi
     $  TwoPi,                  ! 2*Pi
     $  drad                    ! Degree to radian convertion: Pi/180
c Set the values
      parameter
     $  (Pi = 3.141592653589793238d0, TwoPi = 2.0d0*Pi,
     $  drad = Pi/180.0d0, lun_m = 20, lun_ll = 21)

c Internal storage
      character
     $  date*8,                 ! Date of execution
     $  time*10,                ! Time of execution
     $  zone*5                  ! Time zone
      integer*4
     $  values(8),              ! Values of date and time
     $  flag,                   ! Tell invar_ecl_osc which direction to go
     $  i,                      ! Dummy index
     $  nparam                  ! Number of parameters for the function called
                                ! by routine incdism
      real*8
     $  inamax,                 ! Lower "a" bound of inner belt
     $  inamin,                 ! Larger "a" bound of inner belt
     $  inimin,                 ! Lower limit of secular instability zone
     $  inimax,                 ! Upper limit of secular instability zone
     $  incmin,                 ! Lower limit of inclination distribution
     $  incmax,                 ! Upper limit of inclination distribution
     $  brown_params(5),        ! Parameters for the inclination distribution
     $  onecomp,                ! Returns probability of given inclination
     $  h_params(6),            ! Parameters for the H distribution
     $  size_dist_one,          ! Returns H according to exponential distrib
     $  q,                      ! Perihelion distance
     $  qmin,                   ! Lower limit of q distribution
     $  qmax,                   ! Upper limit of q distribution
     $  param(10),              ! Temporary storage for distribution parameters
     $  epoch_m,                ! Epoch of elements [JD]
     $  random,                 ! Random number
     $  ran3,                   ! Random number generator
     $  r,                      ! Distance of object to Sun
     $  x,                      ! X cartesian coordinate of object
     $  y,                      ! Y cartesian coordinate of object
     $  z,                      ! Z cartesian coordinate of object
     $  color0(10)              ! Color parameters of model
      logical
     $  first,                  ! Tells if first call to routine
     $  log                     ! True if we want to log data

c Lightcurve and opposition surge effect parameters
      real*8
     $  gb0, ph0, period0, amp0

c Ran3, size_dist_one, onecomp and qhot are functions defined outside
c this routine.
      external ran3, size_dist_one, onecomp

c Sets initial values
      data
     $  first /.true./,         ! First call
     $  gb0     /-0.12d0/,      ! Opposition surge effect
C BG: DOCUMENT HERE STRANGE VALUE OF BOWELL G?  REFER TO README.notes
     $  ph0     / 0.00d0/,      ! Initial phase of lightcurve
     $  period0 / 0.60d0/,      ! Period of lightcurve (days)
     $  amp0    / 0.00d0/,      ! Amplitude of lightcurve (peak-to-peak)
     $  epoch_m /2453157.5d0/   ! Time at which M is defined

c Make sure variables are retained from call to call
      save

c This is the first call
      if (first) then
c        Define the region of the inner belt.  Hard coded rather than read.
         inamin = 37.d0         ! lowest  value of a (AU)
         inamax = 39.d0         ! largest value of a
         qmin   = 34.d0
         qmax   = 39.d0
         incmin = 0.d0  *drad
         incmax = 180.d0*drad
         inimin = 7.d0  *drad   ! This cuts out 7-20 deg inclinations (nu 8)
         inimax = 20.d0 *drad

c        Read in model parameters, from filename passed in from Driver
         open (unit=lun_m, file=filena, status='old', err=1000)
         read (lun_m, *) (h_params(i),i=1,3)     ! Size distribution parameters
         read (lun_m, *) (brown_params(i),i=1,1) ! Read i distribution width 
         brown_params(1) = brown_params(1)*drad  ! convert to radians
         read (lun_m, *) (color0(i),i=1,10)      ! read color array
         read (lun_m, *) log          ! logical variable, turn on drawing log
         close (lun_m)

c        Record model used, so a record of what was done is in output area
         open (unit=lun_ll, file='ModelUsed.dat', access='sequential',
     $     status='unknown')
         write (lun_ll, '(a)')
     $        '# Inner belt toy, hot only, 2013-06-30'
         call date_and_time(date, time, zone, values)
         write (lun_ll, '(a17,a23,2x,a5)') '# Creation time: ',
     $     date(1:4)//'-'//date(5:6)//'-'//date(7:8)//'T' 
     $     //time(1:2)//':'//time(3:4)//':'//time(5:10), zone
         write (lun_ll, '(''#'')')
         write (lun_ll, '(a,3(1x,f6.2))')
     $        '# H limits and slope for hot:', (h_params(i),i=1,3)
         write (lun_ll, '(a,1(1x,f6.2),a)')
     $        '# Width of hot:              ',
     $        (brown_params(i)/drad,i=1,1)
         write (lun_ll, '(''#'')')
         close (lun_ll)
c        Change "first" so this is not called anymore
         first = .false.
      end if

c ----------------- Specify the orbital elements ---------------------
 1100 continue
c     Determination of "a" distribution, uniform from a_min to a_max
      random=ran3(seed)
      a = inamin + (inamax-inamin)*random

c     Determination of simple "q" distribution. This is NOT a good algorithm.
 1110 continue
      random=ran3(seed)
      q = qmin + (qmax-qmin)*random
      if (q .gt. a) goto 1100 ! q can't exceed a. Redraw another a if so
      e = 1.d0 - q/a

c     Determination of "i" distribution. Width was read as brown_params(1)
      param(1) = brown_params(1)
      nparam = 1
 1200 continue
c     This utitily returns, when there is one parameter, an i drawn from
c      a sin(i)*gaussian inclination distribution.
c     The 7 below is a unique code assigned to this distribution for speed.
      call incdism (seed, nparam, param, incmin, incmax, inc,
     $  7, ierr, onecomp)
c     Rejects if inclination in the nu8 secular instability zone
      if ( (inc .gt. inimin) .and. (inc .lt. inimax) ) goto 1200

c     This is the hot component.  This is an example of using the optional
c     character strings to log information about the detected objects.
c     More useful for resonances, where libration amplitude and mode could
c     be logged, for example.  Note this 7 and the one above are unrelated.
      commen = 'h inner'
      nchar = 7

c     Angles: uniform distribution on allowable values
      random=ran3(seed)
      node = random*TwoPi
      random=ran3(seed)
      peri = random*TwoPi
      random=ran3(seed)
      m = random*TwoPi

c     Set up epoch for orbial elements. This should JD for which M is .
C     specified, but this in this example this is arbitrary.
      epoch = epoch_m
C BG epoch_m is never set!???
c ---------------------orbital elements are specified -------------
c
c     H-mag distribution: exponential law, using parameters passed in.
C       In this example the paramaters are: h_min, h_max, slope alpha
c       Note that the band h is expressed in is the x band for the color array
c       When detections are recorded, the h_x and appararent mag in x band
c       will be logged (by the driver program).
      h = size_dist_one(seed, h_params)

c     Define values for lightcurve and opposition surge effect
      gb = gb0
      ph = ph0
      period = period0
      amp = amp0

c     Get colors for object; these were read from the input file, but
c     could be generated here by some algorithm
c BG EXPLAIN MORE ABOUT COLORS.  Why not just set them as they are read in???
      do i = 1, 10
         color(i) = color0(i)
      end do

c Store object if user requested logging.
c This is often done if one wants to generate a large number (say 10,000)
C 'draws' from this parametric model just to see what the user-generated
C distribution looks like.
c One would normally explicitly open a file and write to its end, but
c the pointer to the file is not retained between calls, so simply use
c the default file assigned to the logical c unit. In this case, the 
C output file will be something like "fort.11"
      if (log) then
         call pos_cart(a,e,inc,node,peri,M,x,y,z)
         r = sqrt(x*x + y*y + z*z)
         open (unit=lun_ll, file='ModelUsed.dat', access='append',
     $     status='old')
         write(lun_ll,101) a,e,inc/drad,node/drad,peri/drad,M/drad,h,r,
     $     commen(1:nchar)
         close (lun_ll)
c BG Change to comment instead of compo
 101     format(6(f8.4,1x),f6.2,1x,f8.4,1x,a)
C BG: WEIRD to use a1 format here
      end if

c Prepare return code
      ierr = 0

      return

 1000 continue
c If we get here, there is something really wrong, better return with
c panic code.
      ierr = -20
      return

      end

      include 'ModelUtils.f'
